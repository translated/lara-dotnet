#!/usr/bin/env python3
import glob
import os
import subprocess
import sys
import re
from typing import List


def die(msg: str):
    print(msg, file=sys.stderr)
    sys.exit(1)


def cmd_exec(cmd: List[str]) -> str:
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode != 0:
        die(f"Error: Failed to execute command: {' '.join(cmd)}\n{result.stderr}")
    return result.stdout.strip()


def check_git_status():
    stdout = cmd_exec(["git", "status", "--porcelain"])
    if len(stdout) > 0:
        die("Error: There are uncommitted changes. Please commit or stash them before proceeding.")

    stdout = cmd_exec(["git", "tag", "--points-at", "HEAD"])
    if len(stdout) > 0:
        die("Error: HEAD is already tagged.")

    branch = cmd_exec(["git", "branch", "--show-current"])
    if branch != "main":
        die("Error: You must be on the main branch to update the version.")

def get_version_from_csproj(csproj_file: str) -> str:
    with open(csproj_file, "r") as f:
        content = f.read()

    # Look for Version tag in the csproj file
    version_match = re.search(r'<Version>([^<]+)</Version>', content)
    if version_match:
        return version_match.group(1)

    die(f"Error: Could not find Version in {csproj_file}.")


def set_version_in_csproj(csproj_file: str, version: str):
    with open(csproj_file, "r") as f:
        content = f.read()

    # Update Version tag
    content = re.sub(r'<Version>[^<]+</Version>', f'<Version>{version}</Version>', content)
    
    # Update AssemblyVersion and FileVersion
    content = re.sub(r'<AssemblyVersion>[^<]+</AssemblyVersion>', f'<AssemblyVersion>{version}.0</AssemblyVersion>', content)
    content = re.sub(r'<FileVersion>[^<]+</FileVersion>', f'<FileVersion>{version}.0</FileVersion>', content)

    with open(csproj_file, "w") as f:
        f.write(content)

def set_version_in_SdkVersion(sdk_version_file: str, version: str):
    with open(sdk_version_file, "r") as f:
        content = f.read()
        
    # Update the version line
    content = re.sub(
        r'public const string Version = "\d+\.\d+\.\d+";',
        f'public const string Version = "{version}";',
        content
        )
    
    with open(sdk_version_file, "w") as f:
        f.write(content)

def update_version(part: str) -> str:
    # Find the main SDK csproj file
    csproj_file = os.path.join(os.path.dirname(__file__), "src", "Lara", "Lara.csproj")
    sdk_version_file = os.path.join(os.path.dirname(__file__), "src", "Lara", "SdkVersion.cs")

    # Update version
    version = get_version_from_csproj(csproj_file)

    major, minor, patch = version.split(".")
    if part == "major":
        major = str(int(major) + 1)
        minor = "0"
        patch = "0"
    elif part == "minor":
        minor = str(int(minor) + 1)
        patch = "0"
    elif part == "patch":
        patch = str(int(patch) + 1)
    else:
        die("Error: Invalid version part.")

    new_version = f"{major}.{minor}.{patch}"

    set_version_in_csproj(csproj_file, new_version)
    set_version_in_SdkVersion(sdk_version_file, new_version)

    return new_version


def git_tag(version: str):
    cmd_exec(["git", "add", "."])
    cmd_exec(["git", "commit", "-m", f"v{version}"])
    cmd_exec(["git", "tag", "-a", f"v{version}", "-m", f"v{version}"])


def main():
    args = sys.argv[1:]

    if len(args) != 1 or args[0] not in ["major", "minor", "patch"]:
        print("Usage: python3 version.py [major|minor|patch]")
        sys.exit(1)

    check_git_status()
    version = update_version(args[0])
    git_tag(version)

    print(f"Tag v{version} created.")


if __name__ == '__main__':
    main()
